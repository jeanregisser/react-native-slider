// flow-typed signature: b72a636e5230c4cedb5063015da72038
// flow-typed version: <<STUB>>/eslint-plugin-unicorn_v9.1.1/flow_v0.102.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'eslint-plugin-unicorn'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'eslint-plugin-unicorn' {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'eslint-plugin-unicorn/rules/catch-error-name' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/custom-error-definition' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/error-message' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/escape-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/explicit-length-check' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/filename-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/import-index' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/new-for-builtins' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-abusive-eslint-disable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-instanceof' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-console-spaces' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-fn-reference-in-iterator' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-for-loop' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-hex-escape' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-new-buffer' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-process-exit' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unsafe-regex' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unused-properties' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-zero-fractions' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/number-literal-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-add-event-listener' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-event-key' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-exponentiation-operator' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-flat-map' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-includes' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-node-append' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-node-remove' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-query-selector' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-spread' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-starts-ends-with' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-text-content' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-type-error' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prevent-abbreviations' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/regex-shorthand' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/throw-new-error' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/avoid-capture' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-docs-url' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-method-named' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/resolve-variable-name' {
  declare module.exports: any;
}

// Filename aliases
declare module 'eslint-plugin-unicorn/index' {
  declare module.exports: $Exports<'eslint-plugin-unicorn'>;
}
declare module 'eslint-plugin-unicorn/index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn'>;
}
declare module 'eslint-plugin-unicorn/rules/catch-error-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/catch-error-name'>;
}
declare module 'eslint-plugin-unicorn/rules/custom-error-definition.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/custom-error-definition'>;
}
declare module 'eslint-plugin-unicorn/rules/error-message.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/error-message'>;
}
declare module 'eslint-plugin-unicorn/rules/escape-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/escape-case'>;
}
declare module 'eslint-plugin-unicorn/rules/explicit-length-check.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/explicit-length-check'>;
}
declare module 'eslint-plugin-unicorn/rules/filename-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/filename-case'>;
}
declare module 'eslint-plugin-unicorn/rules/import-index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/import-index'>;
}
declare module 'eslint-plugin-unicorn/rules/new-for-builtins.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/new-for-builtins'>;
}
declare module 'eslint-plugin-unicorn/rules/no-abusive-eslint-disable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-abusive-eslint-disable'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-instanceof.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-instanceof'>;
}
declare module 'eslint-plugin-unicorn/rules/no-console-spaces.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-console-spaces'>;
}
declare module 'eslint-plugin-unicorn/rules/no-fn-reference-in-iterator.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-fn-reference-in-iterator'>;
}
declare module 'eslint-plugin-unicorn/rules/no-for-loop.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-for-loop'>;
}
declare module 'eslint-plugin-unicorn/rules/no-hex-escape.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-hex-escape'>;
}
declare module 'eslint-plugin-unicorn/rules/no-new-buffer.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-new-buffer'>;
}
declare module 'eslint-plugin-unicorn/rules/no-process-exit.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-process-exit'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unsafe-regex.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unsafe-regex'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unused-properties.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unused-properties'>;
}
declare module 'eslint-plugin-unicorn/rules/no-zero-fractions.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-zero-fractions'>;
}
declare module 'eslint-plugin-unicorn/rules/number-literal-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/number-literal-case'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-add-event-listener.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-add-event-listener'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-event-key.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-event-key'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-exponentiation-operator.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-exponentiation-operator'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-flat-map.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-flat-map'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-includes.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-includes'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-node-append.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-node-append'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-node-remove.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-node-remove'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-query-selector.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-query-selector'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-spread.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-spread'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-starts-ends-with.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-starts-ends-with'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-text-content.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-text-content'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-type-error.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-type-error'>;
}
declare module 'eslint-plugin-unicorn/rules/prevent-abbreviations.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prevent-abbreviations'>;
}
declare module 'eslint-plugin-unicorn/rules/regex-shorthand.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/regex-shorthand'>;
}
declare module 'eslint-plugin-unicorn/rules/throw-new-error.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/throw-new-error'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/avoid-capture.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/avoid-capture'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-docs-url.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-docs-url'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-method-named.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-method-named'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/resolve-variable-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/resolve-variable-name'>;
}
